import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import requestRoutes from './routes/request.routes';
import wbMockApi from './api/wb-mock';
import { checkConnection, runMigrations } from './utils/db';
import logger from './utils/logger';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const app = express();
const port = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
async function initializeApp() {
  try {
    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...');
    const isConnected = await checkConnection();
    
    if (isConnected) {
      logger.info('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
      logger.info('–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...');
      try {
        await runMigrations();
        logger.info('–ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
      } catch (migrationError) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', migrationError);
        logger.warn('–°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å');
      }
    } else {
      logger.warn('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω');
      logger.warn('–ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
    }
    
    // API –º–∞—Ä—à—Ä—É—Ç—ã
    app.use('/api/requests', requestRoutes);
    
    // –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    app.use((req, res, next) => {
      logger.info(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.url}`, { 
        headers: req.headers,
        query: req.query,
        params: req.params,
        body: req.body
      });
      next();
    });
    
    // –ú–æ–∫ Wildberries API
    app.use('/mock-wb', wbMockApi);
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    app.get('/api/debug', (req, res) => {
      logger.info('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ /api/debug', { headers: req.headers, query: req.query });
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
      const routes: any[] = [];
      
      app._router.stack.forEach((middleware: any) => {
        if (middleware.route) {
          // –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
          routes.push({
            path: middleware.route.path,
            methods: Object.keys(middleware.route.methods)
          });
        } else if (middleware.name === 'router') {
          // –º–∞—Ä—à—Ä—É—Ç—ã –≤ router.use
          middleware.handle.stack.forEach((handler: any) => {
            if (handler.route) {
              routes.push({
                path: handler.route.path,
                methods: Object.keys(handler.route.methods)
              });
            }
          });
        }
      });
      
      res.json({ 
        status: 'ok', 
        message: 'Debug information',
        routes: routes,
        requestInfo: {
          url: req.url,
          method: req.method,
          headers: req.headers,
          query: req.query
        }
      });
    });
    
    // –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    app.get('/api/health', (req, res) => {
      res.json({ status: 'ok', message: 'Server is running' });
    });
    
    // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ
    const mockOrders = [
      { id: 1, number: 'WB-123', status: 'new', total: 1500 },
      { id: 2, number: 'WB-124', status: 'processing', total: 2300 },
      { id: 3, number: 'WB-125', status: 'shipped', total: 980 },
    ];
    
    const mockProducts = [
      { id: 1, name: '–§—É—Ç–±–æ–ª–∫–∞', sku: 'TSH-001', stock: 150, price: 999 },
      { id: 2, name: '–î–∂–∏–Ω—Å—ã', sku: 'JNS-002', stock: 85, price: 2499 },
      { id: 3, name: '–ö—Ä–æ—Å—Å–æ–≤–∫–∏', sku: 'SNK-003', stock: 42, price: 3999 },
    ];
    
    // –ú–æ–∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    app.get('/api/orders', (req, res) => {
      res.json(mockOrders);
    });
    
    app.get('/api/products', (req, res) => {
      res.json(mockProducts);
    });
    
    app.get('/api/metrics', (req, res) => {
      res.json({
        activeOrders: mockOrders.filter(o => o.status !== 'shipped').length,
        totalProducts: mockProducts.reduce((acc, p) => acc + p.stock, 0),
        todaySales: 12,
        averageRating: 4.8
      });
    });
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(port, () => {
      logger.info(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    });
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
initializeApp(); 