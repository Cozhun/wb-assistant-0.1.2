import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../models/supply.dart';
import '../services/supply_service.dart';
import '../../../ui/common/widgets/adaptive_card.dart';
import '../../../shared/widgets/loading_indicator.dart';

/// –≠–∫—Ä–∞–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Å–±–æ—Ä–∫–∏ –ø–æ—Å—Ç–∞–≤–æ–∫
class SupplyListScreen extends StatefulWidget {
  const SupplyListScreen({super.key});

  @override
  State<SupplyListScreen> createState() => _SupplyListScreenState();
}

class _SupplyListScreenState extends State<SupplyListScreen> {
  final SupplyService _supplyService = SupplyService();
  bool _isLoading = true;
  List<Supply> _supplies = [];
  String? _errorMessage;
  
  // –§–∏–ª—å—Ç—Ä—ã
  bool _filterActive = true;
  bool _filterToday = false;
  bool _filterTomorrow = false;
  bool _filterOverdue = false;
  
  @override
  void initState() {
    super.initState();
    _loadSupplies();
  }
  
  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤–æ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞
  Future<void> _loadSupplies() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });
    
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º get-–∑–∞–ø—Ä–æ—Å –∫ API
      // –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      final supplies = await _supplyService.getMockSupplies();
      
      if (mounted) {
        setState(() {
          _supplies = supplies;
          _isLoading = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞–≤–æ–∫: $e';
          _isLoading = false;
        });
      }
    }
  }
  
  /// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫
  List<Supply> _getFilteredSupplies() {
    return _supplies.where((supply) {
      if (_filterActive && !supply.isActive) {
        return false;
      }
      if (_filterToday && !supply.isToday) {
        return false;
      }
      if (_filterTomorrow && !supply.isTomorrow) {
        return false;
      }
      if (_filterOverdue && !supply.isOverdue) {
        return false;
      }
      return true;
    }).toList();
  }
  
  /// –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ –µ—ë —Å–±–æ—Ä–∫–µ
  void _navigateToSupplyDetails(Supply supply) {
    context.go('/supplies/${supply.id}');
  }
  
  /// –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏
  void _continueSupplyCollection(Supply supply) {
    _navigateToSupplyDetails(supply);
  }
  
  @override
  Widget build(BuildContext context) {
    final filteredSupplies = _getFilteredSupplies();
    return Scaffold(
      appBar: AppBar(
        title: const Text('–ú–æ–∏ –ø–æ—Å—Ç–∞–≤–∫–∏'),
        actions: [
          IconButton(
            icon: const Icon(Icons.assignment_outlined),
            onPressed: () => context.go('/supplies/closed-orders'),
            tooltip: '–ó–∞–∫–∞–∑—ã –∏–∑ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫',
          ),
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadSupplies,
            tooltip: '–û–±–Ω–æ–≤–∏—Ç—å',
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: LoadingIndicator())
          : _buildBody(filteredSupplies),
    );
  }
  
  Widget _buildBody(List<Supply> supplies) {
    if (_errorMessage != null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              _errorMessage!,
              textAlign: TextAlign.center,
              style: const TextStyle(color: Colors.red),
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _loadSupplies,
              child: const Text('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'),
            ),
          ],
        ),
      );
    }
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–º–µ–Ω—ã
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('üìç –°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ', style: Theme.of(context).textTheme.titleMedium),
              const SizedBox(height: 4),
              Text('‚è±Ô∏è –ù–∞ —Å–º–µ–Ω–µ: 3—á 15–º'),
            ],
          ),
        ),
        
        // –§–∏–ª—å—Ç—Ä—ã
        Card(
          margin: const EdgeInsets.all(8.0),
          child: Padding(
            padding: const EdgeInsets.all(8.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–§–∏–ª—å—Ç—Ä—ã:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                Wrap(
                  spacing: 8.0,
                  children: [
                    FilterChip(
                      label: const Text('–ê–∫—Ç–∏–≤–Ω—ã–µ'),
                      selected: _filterActive,
                      onSelected: (value) {
                        setState(() {
                          _filterActive = value;
                        });
                      },
                    ),
                    FilterChip(
                      label: const Text('–°–µ–≥–æ–¥–Ω—è'),
                      selected: _filterToday,
                      onSelected: (value) {
                        setState(() {
                          _filterToday = value;
                        });
                      },
                    ),
                    FilterChip(
                      label: const Text('–ó–∞–≤—Ç—Ä–∞'),
                      selected: _filterTomorrow,
                      onSelected: (value) {
                        setState(() {
                          _filterTomorrow = value;
                        });
                      },
                    ),
                    FilterChip(
                      label: const Text('–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ'),
                      selected: _filterOverdue,
                      onSelected: (value) {
                        setState(() {
                          _filterOverdue = value;
                        });
                      },
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
          child: Text(
            '–ü–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è —Å–±–æ—Ä–∫–∏: ${supplies.length}',
            style: const TextStyle(fontWeight: FontWeight.bold),
          ),
        ),
        
        // –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫
        Expanded(
          child: supplies.isEmpty
              ? const Center(
                  child: Text('–ù–µ—Ç –ø–æ—Å—Ç–∞–≤–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º'),
                )
              : RefreshIndicator(
                  onRefresh: _loadSupplies,
                  child: ListView.builder(
                    padding: const EdgeInsets.all(8.0),
                    itemCount: supplies.length,
                    itemBuilder: (context, index) {
                      final supply = supplies[index];
                      return _buildSupplyCard(supply);
                    },
                  ),
                ),
        ),
      ],
    );
  }
  
  Widget _buildSupplyCard(Supply supply) {
    final theme = Theme.of(context);
    
    Color statusColor;
    Color progressColor;
    
    switch (supply.status) {
      case SupplyStatus.collecting:
        statusColor = Colors.blue;
        progressColor = Colors.blue;
        break;
      case SupplyStatus.waitingShipment:
        statusColor = Colors.orange;
        progressColor = Colors.green;
        break;
      case SupplyStatus.shipped:
        statusColor = Colors.green;
        progressColor = Colors.green;
        break;
      case SupplyStatus.delivered:
        statusColor = Colors.green.shade900;
        progressColor = Colors.green.shade900;
        break;
      case SupplyStatus.cancelled:
        statusColor = Colors.red;
        progressColor = Colors.red;
        break;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    final day = supply.shipmentDate.day.toString().padLeft(2, '0');
    final month = supply.shipmentDate.month.toString().padLeft(2, '0');
    String formattedDate = '$day.$month.${supply.shipmentDate.year}';
    
    if (supply.isToday) {
      formattedDate = '–°–µ–≥–æ–¥–Ω—è –¥–æ ${supply.shipmentDate.hour}:${supply.shipmentDate.minute.toString().padLeft(2, '0')}';
    } else if (supply.isTomorrow) {
      formattedDate = '–ó–∞–≤—Ç—Ä–∞ –¥–æ ${supply.shipmentDate.hour}:${supply.shipmentDate.minute.toString().padLeft(2, '0')}';
    }
    
    // –°—Ç–∞—Ç—É—Å —Å—Ä–æ–∫–∞
    Widget deadlineWidget;
    if (supply.isOverdue) {
      deadlineWidget = Text(
        '–°—Ä–æ–∫: $formattedDate (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω)',
        style: const TextStyle(color: Colors.red, fontWeight: FontWeight.bold),
      );
    } else if (supply.isToday) {
      deadlineWidget = Text(
        '–°—Ä–æ–∫: $formattedDate',
        style: const TextStyle(color: Colors.orange),
      );
    } else {
      deadlineWidget = Text('–°—Ä–æ–∫: $formattedDate');
    }
    
    return Padding(
      padding: const EdgeInsets.only(bottom: 8.0),
      child: AdaptiveCard(
        child: InkWell(
          onTap: () => _navigateToSupplyDetails(supply),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Expanded(
                      child: Text(
                        supply.name,
                        style: theme.textTheme.titleMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 8.0,
                        vertical: 4.0,
                      ),
                      decoration: BoxDecoration(
                        color: statusColor.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(4.0),
                      ),
                      child: Text(
                        _getStatusText(supply.status),
                        style: TextStyle(
                          color: statusColor,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤–∫–µ
                Text('–ü–æ—Å—Ç–∞–≤–∫–∞: ${supply.id}'),
                if (supply.assignedTo != null && supply.assignedTo!.isNotEmpty)
                  Text('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${supply.assignedTo}'),
                
                // –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±–æ—Ä–∫–∏
                const SizedBox(height: 8),
                Row(
                  children: [
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text('–ó–∞–∫–∞–∑–æ–≤: ${supply.completedOrders}/${supply.totalOrders}'),
                          const SizedBox(height: 4),
                          LinearProgressIndicator(
                            value: supply.progress,
                            backgroundColor: Colors.grey[300],
                            valueColor: AlwaysStoppedAnimation<Color>(progressColor),
                          ),
                          const SizedBox(height: 4),
                          Text('–ü—Ä–æ–≥—Ä–µ—Å—Å: ${(supply.progress * 100).toInt()}%'),
                        ],
                      ),
                    ),
                    const SizedBox(width: 16),
                    if (supply.status == SupplyStatus.collecting)
                      ElevatedButton(
                        onPressed: () => _continueSupplyCollection(supply),
                        child: supply.progress > 0 ? const Text('–ü–†–û–î–û–õ–ñ–ò–¢–¨') : const Text('–ù–ê–ß–ê–¢–¨'),
                      )
                    else
                      ElevatedButton(
                        style: ElevatedButton.styleFrom(
                          backgroundColor: statusColor,
                        ),
                        onPressed: () => _navigateToSupplyDetails(supply),
                        child: const Text('–î–ï–¢–ê–õ–ò'),
                      ),
                  ],
                ),
                
                const SizedBox(height: 8),
                deadlineWidget,
              ],
            ),
          ),
        ),
      ),
    );
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—Ç–∞–≤–∫–∏
  String _getStatusText(SupplyStatus status) {
    switch (status) {
      case SupplyStatus.collecting:
        return '–í —Å–±–æ—Ä–∫–µ';
      case SupplyStatus.waitingShipment:
        return '–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≥—Ä—É–∑–∫–∏';
      case SupplyStatus.shipped:
        return '–û—Ç–≥—Ä—É–∂–µ–Ω–∞';
      case SupplyStatus.delivered:
        return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–∞';
      case SupplyStatus.cancelled:
        return '–û—Ç–º–µ–Ω–µ–Ω–∞';
    }
  }
} 