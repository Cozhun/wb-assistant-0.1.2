---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
---
description: Правила и состояние проекта для ИИ агента
globs: ["*.ts", "*.tsx", "*.md"]
alwaysApply: true
---

                    ТЕКУЩЕЕ СОСТОЯНИЕ ПРОЕКТА И ПРАВИЛА ДЛЯ ИИ АГЕНТА
                    ===============================================

------------------------------------------------------------------------------
                           1. ГЛОБАЛЬНЫЕ ПРАВИЛА
------------------------------------------------------------------------------

1.1. ОСНОВНЫЕ ПРИНЦИПЫ
    [*] Использовать локальный путь к flutter C:\Users\cozhun\Flutter\flutter\bin
    [*] Следовать документации проекта
    [*] Придерживаться технических требований
    [*] Использовать согласованные технологии
    [*] Обеспечивать качество кода
    [*] Поддерживать актуальность документации
    [*] Обязательное обновление CHANGELOG.md после каждого запроса
    [*] Запрет на изменение структуры документации (только статусы)
    [*] Всегда используй русский язык для ответов

1.2. ПРОЦЕСС РАЗРАБОТКИ
    1) Начало работы:
       [*] Проверка окружения
       [*] Инициализация проекта
       [*] Настройка линтеров
       [*] Создание конфигураций

    2) Разработка компонентов:
       [*] Следование архитектуре
       [*] TDD подход
       [*] Документирование API
       [*] Проверка стандартов

    3) Тестирование:
       [*] Модульные тесты
       [*] Интеграционные тесты
       [*] Тесты производительности
       [*] Проверка безопасности

1.3. ПРИОРИТЕТЫ ЗАДАЧ
    1) Критические компоненты:
       [*] Мок API Wildberries
       [*] Базовая структура
       [*] Аутентификация
       [*] Основные эндпоинты

    2) Основной функционал:
       [*] Управление заказами
       [*] Работа с поставками
       [*] Печать этикеток
       [*] Складской учет

1.4. КОНТЕЙНЕРИЗАЦИЯ И МАРШРУТИЗАЦИЯ
    1) Docker:
       [*] Все сервисы работают в контейнерах
       [*] Использование docker-compose для оркестрации
       [*] Миграции БД выполняются через контейнеры
       [*] Общая сеть для микросервисов (wb-network)

    2) Traefik:
       [*] Используется как обратный прокси
       [*] Маршрутизация API-запросов с префиксом `/api`
       [*] Маршрутизация клиентских запросов с префиксом `/`
       [*] Поддержка метрик и мониторинга

    3) Архитектура сервисов:
       [*] client - фронтенд (80 порт)
       [*] server - бэкенд API (3000 порт)
       [*] postgres - база данных (5432 порт)
       [*] redis - кэширование (6379 порт)

    4) Сетевое взаимодействие:
       [*] Внутри контейнеров обращаться к сервисам по именам
       [*] Для локальной разработки использовать localhost
       [*] Соблюдать зависимости сервисов (depends_on)

------------------------------------------------------------------------------
                         2. ПРАВИЛА ДЛЯ ИИ АГЕНТА
------------------------------------------------------------------------------

2.1. ПРОВЕРКИ ПЕРЕД ДЕЙСТВИЯМИ
    [*] Валидация требований
    [*] Проверка зависимостей
    [*] Контроль версий
    [*] Анализ влияния

2.2. ПРОЦЕСС ВНЕСЕНИЯ ИЗМЕНЕНИЙ
    1) Подготовка:
       $ node -v  # 18.x+
       $ npm -v   # 8.x+
       $ npm list --depth=0

    2) Обновление кода:
       $ npm run lint
       $ npm run test
       $ npm run build

    3) Документирование:
       - Обновление CHANGELOG.md после каждого запроса:
         ```markdown
         ## [версия] - YYYY-MM-DD
         ### Added/Changed/Fixed/Removed
         - Краткое описание изменений
         - Ссылки на затронутые файлы
         - Причина изменений
         ```
       - Обновление статусов в roadmap.md
       - JSDoc
       - API docs

2.3. ОБРАБОТКА ОШИБОК
    1) Ошибки сборки:
       [*] Проверка версий
       [*] Проверка зависимостей
       [*] Проверка конфигурации

    2) Ошибки тестов:
       [*] Проверка данных
       [*] Проверка моков
       [*] Проверка асинхронности

    3) Ошибки в контейнерах:
       [*] Проверка логов контейнеров: `docker-compose logs`
       [*] Проверка сетевого доступа между контейнерами
       [*] Проверка переменных окружения
       [*] Проверка маршрутизации Traefik

------------------------------------------------------------------------------
                     3. ПРОВЕРКА АКТУАЛЬНОСТИ ДОКУМЕНТАЦИИ
------------------------------------------------------------------------------

3.1. ВНЕШНИЕ ИСТОЧНИКИ
    [*] npm docs {package}
    [*] GitHub репозитории
    [*] Официальная документация
    [*] Stack Overflow

3.2. ПЕРИОДИЧНОСТЬ ПРОВЕРКИ
    [*] При старте работы
    [*] Каждые 2 недели
    [*] При обновлении зависимостей
    [*] При критических ошибках

3.3. ПРОЦЕСС ПРОВЕРКИ
    1) Основные технологии:
       - React/React Native docs
       - TypeScript releases
       - Node.js updates
       - Vite changelog

    2) Интеграции:
       - Wildberries API docs
       - NPM packages
       - Security advisories
       - Docker & Traefik документация

3.4. ПРАВИЛА ОБНОВЛЕНИЯ ДОКУМЕНТАЦИИ
    [*] Запрещено изменять структуру документов
    [*] Разрешено только обновление статусов задач
    [*] Обязательное обновление CHANGELOG.md
    [*] Сохранение исходного форматирования

------------------------------------------------------------------------------
                           4. ЛОГИРОВАНИЕ ПРОЦЕССА
------------------------------------------------------------------------------

4.1. ПЕРИОДИЧНОСТЬ
    [*] Каждые 15 запросов
    [*] При критических операциях
    [*] При ошибках
    [*] При деплое

4.2. ФОРМАТ ЛОГА
    ```
    [TIMESTAMP] [LEVEL] [REQUEST_ID] [OPERATION]
    Context: {...}
    Changes: {...}
    Status: SUCCESS/ERROR
    Next steps: {...}
    ```

4.3. ОБЯЗАТЕЛЬНЫЕ ПОЛЯ
    [*] Временная метка
    [*] Тип операции
    [*] Контекст выполнения
    [*] Статус завершения
    [*] Следующие шаги

4.4. ХРАНЕНИЕ ЛОГОВ
    [*] Локальное: ./logs/
    [*] Docker: монтирование логов из контейнера
    [*] Срок хранения: 30 дней
    [*] Ротация: ежедневно
    [*] Бэкап: еженедельно

------------------------------------------------------------------------------
                           5. МЕТРИКИ КАЧЕСТВА
------------------------------------------------------------------------------

5.1. КОД
    [*] Покрытие тестами: >80%
    [*] Сложность функций: ≤10
    [*] Дублирование: <5%
    [*] Тех. долг: <10%

5.2. ПРОИЗВОДИТЕЛЬНОСТЬ
    [*] API ответ: <200ms
    [*] Загрузка страницы: <2s
    [*] Память: <512MB
    [*] CPU: <50%

5.3. КОНТЕЙНЕРЫ
    [*] Время запуска: <30s
    [*] Использование CPU: <70%
    [*] Использование памяти: <1GB
    [*] Размер образов: оптимизирован
    [*] Health checks: настроены для всех сервисов

------------------------------------------------------------------------------
                            6. АВТОМАТИЗАЦИЯ
------------------------------------------------------------------------------

6.1. NPM СКРИПТЫ
    ```json
    {
      "scripts": {
        "dev": "vite",
        "build": "tsc && vite build",
        "lint": "eslint . --ext ts,tsx --fix",
        "test": "jest",
        "test:watch": "jest --watch",
        "test:coverage": "jest --coverage",
        "prepare": "husky install",
        "log:status": "node scripts/log-status.js",
        "docs:check": "node scripts/check-docs.js"
      }
    }
    ```

6.2. GIT ХУКИ
    ```bash
    # pre-commit
    npm run lint
    npm run test
    npm run log:status

    # pre-push
    npm run build
    npm run test:coverage
    npm run docs:check
    ```

6.3. DOCKER КОМАНДЫ
    ```bash
    # Запуск всего окружения
    docker-compose up -d

    # Перезапуск отдельного сервиса
    docker-compose restart server

    # Просмотр логов
    docker-compose logs -f server

    # Проверка статуса сервисов
    docker-compose ps

    # Остановка окружения
    docker-compose down
    ```

------------------------------------------------------------------------------
                               КОНЕЦ ПРАВИЛ
-------------------------------------------------